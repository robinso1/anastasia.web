generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(JUNIOR_MANAGER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks        Task[]        @relation("AssignedTasks")
  createdTasks Task[]        @relation("CreatedTasks")
  messages     Message[]     @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  projects     Project[]     @relation("ProjectMembers")
  managedProjects Project[]  @relation("ProjectManager")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assigneeId  String?
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User     @relation("CreatedTasks", fields: [creatorId], references: [id])
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  managerId   String
  manager     User     @relation("ProjectManager", fields: [managerId], references: [id])
  tasks       Task[]
  members     User[]   @relation("ProjectMembers")
  documents   Document[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  attachments Attachment[]
}

model Document {
  id          String   @id @default(uuid())
  title       String
  description String?
  filePath    String
  fileType    String
  fileSize    Int
  isKnowledgeBase Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  filePath  String
  fileName  String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())

  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MANAGER
  ASSISTANT_MANAGER
  JUNIOR_MANAGER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
} 